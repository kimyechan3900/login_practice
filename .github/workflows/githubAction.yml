name: Build and Test on Pull Request

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    # 작업을 실행할 가상 환경 설정

    steps:
      # 깃허브 저장소를 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2

      # JDK 11 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      # Gradle을 사용하여 빌드
      - name: Build with Gradle
        run: |
          cd hello-spring
          chmod +x gradlew
          ./gradlew build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지를 빌드후 Docker Hub 푸시
      - name: Build and push Docker image
        run: |
          cd hello-spring
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}

     
          
      # SCP로 최신 JAR 파일 전송
      - name: SCP to SERVERS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER1_IP }}, ${{ secrets.SERVER2_IP }}, ${{ secrets.SERVER3_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ secrets.LOCAL_FILE_PATH }}
          target: ${{ secrets.DESTINATION_FILE_PATH }}




      # 각 서버에 SSH로 접속하여 도커 컴포즈로 배포
      - name: SSH to SERVERS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER1_IP }},${{ secrets.SERVER2_IP }},${{ secrets.SERVER3_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd login_practice/hello-spring
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker-compose up -d --remove-orphans  
